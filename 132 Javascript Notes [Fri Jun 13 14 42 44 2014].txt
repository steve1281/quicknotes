

Naming conventions:

   functionNamesLikeThis, 
   variableNamesLikeThis, 
   ClassNamesLikeThis, 
   EnumNamesLikeThis, 
   methodNamesLikeThis, 
   CONSTANT_VALUES_LIKE_THIS, 
   foo.namespaceNamesLikeThis.bar,
   filenameslikethis.js.
   
   
-------------------------------------- General Overview ----------------------------------------------
=== Javascript ===

  JavaScript was invented by Brendan Eich, to be used in Netscape (a no longer existing browser) in 1995,
  and was adopted by the ECMA standard association in 1997.

  ECMA-262 is the official name. ECMAScript 5 (version 1.8.5 - July 2010) is the latest standard. 

=== Basics ===


  document.getElementById("demo").innerHTML = "Hello JavaScript";
  (jquery:  $("#demo").innerHTML = "Hello JavaScript"; )

  <script></script>  tags to contain 
  
  == jquery note: Jquery code is often dependant on the DOM being loaded. Contain the code in a .ready:
      
     $( document ).ready(function() {
        console.log( "ready!" );
        // functions and such can go here
     });

  == javascript can be linked in ==

     <script src="myScript.js"></script>

  == javascript can write directly to the document (not recommended) ==
     <script>
       document.write(Date());
     </script>

  == for debugging (using a capable browser) use console.log() ==

=== Data Types/Functions ===

  var length = 16;                                      // Number assigned by a number literal
  var lastName = "Johnson";                             // String assigned by a string literal
  var cars = ["Saab", "Volvo", "BMW"];                  // Array  assigned by an array literal
  var person = {firstName:John, lastName:Doe};          // Object assigned by an object literal 

  function myFunction(a, b) {
    return a * b;                                     // returns the product of a and b
  }


=== Some Statement Identifiers ===

  break 	Terminates a switch or a loop.  
  catch 	Marks the block of statements to be executed when an error occurs in a try block.
  continue 	Jumps out of a loop and starts at the top.
  do ... while 	Executes a block of statements and repeats the block while a condition is true.
  for 		Marks a block of statements to be executed as long as a condition is true.
  for ... in 	Marks a block of statements to be executed for each element of an object (or array).
  function 	Declares a function.
  if ... else 	Marks a block of statements to be executed depending on a condition.
  return 	Exits a function.
  switch 	Marks a block of statements to be executed depending on different cases.
  throw 	Throws (generates) an error.
  try 		Implements error handling to a block of statements.
  var 		Declares a variable.
  while 	Marks a block of statements to be executed while a condition is true. 

  == statements can be broken up by using \     ==
    var text = "Hello \
    World!"

=== Declarations ===
  with a var
  == multiple on one line ==
	var lastName = "Doe", age = 30, job = "carpenter"; 
 
  types are dynamic and can change on the fly
  undefined is a reserve word for var without value and without type
  null means type is established, but value is not there.
  type can be determined using a typeof() method

  using var will scope the object
  not using var will make the object global, no matter where its done (even in a function)


=== Functions ===

  var x = myFunction(4, 3);        // Function is called, return value will end up in x

  function myFunction(a, b) {
    return a * b;                // Function returns the product of a and b
  }


=== Events ===
Javascript can respond to events

  onchange 	An HTML element has been changed
  onclick 	The user clicks an HTML element
  onmouseover 	The user moves the mouse over an HTML element
  onmouseout 	The user moves the mouse away from an HTML element
  onkeydown 	The user pushes a keyboard key
  onload 	The browser has finished loading the page

  example: 
    <button onclick='getElementById("demo").innerHTML=Date()'>The time is?</button>


=== Javascript Objects ===

Objects are just data, with added properties and methods.
example:

  car.name
  car.model
  car.weight
  car.color
  car.start()
  car.drive()
  car.brak()

  declare:

    var person = {
      firstName:"John",
      lastName :"Doe",
      id       :5566
    };



=== String Properties and Methods ===

Primitive values, like "John", cannot have properties or methods (because they are not objects).

But with JavaScript, methods and properties are also available to primitive values, because JavaScript treats primitive values as objects when executing methods and properties.

Properties:

    length
    prototype
    constructor

Methods:

    charAt()
    charCodeAt()
    concat()
    fromCharCode()
    indexOf()
    lastIndexOf()
    localeCompare()
    match()
    replace()
    search()
    slice()
    split()
    substr()
    substring()
    toLowerCase()
    toUpperCase()
    toString()
    trim()
    valueOf()



=== Numbers Properties and Methods ===

  Properties
    MAX_VALUE
    MIN_VALUE
    NEGATIVE_INFINITY
    POSITIVE_INFINITY
    NaN
    prototype
    constructor

  Methods
    toExponential()
    toFixed()
    toPrecision()
    toString()
    valueOf()

  Note:
    Normally, primitive values (like 3.14) cannot have properties and methods (because they are not objects).
    However, JavaScript treats primitive values as objects when using properties and methods.


=== Math library/API ===

  Constants:
    Math.E
    Math.PI 
    Math.SQRT2
    Math.SQRT1_2
    Math.LN2
    Math.LN10
    Math.LOG2E
    Math.LOG10E

  Some methods:
   Math.round()
   Math.random()
   Math.max()
   Maths.min()
   Math.floor()

  etc etc


=== Date library/API ===

  Some methods:
    getFullYear()
    getTime()  - milliseconds since 01.01.1970
    setFullYear() - set getFullYear format
    toUTCString() - convert date to a string
    getDay() - weekday as a number
    
  Detailed example, with setTimeOut function :

  <!DOCTYPE html>
  <html>
  <head>
  <script>
    function startTime() {
      var today=new Date();
      var h=today.getHours();
      var m=today.getMinutes();
      var s=today.getSeconds();
      m = checkTime(m);
      s = checkTime(s);
      document.getElementById('txt').innerHTML = h+":"+m+":"+s;
      var t = setTimeout(function(){startTime()},500);
  }

  function checkTime(i) {
    if (i<10) {i = "0" + i};  // add zero in front of numbers < 10
    return i;
  }
  </script>
  </head>

  <body onload="startTime()">

  <div id="txt"></div>

  </body>
  </html>

  Example:

    var myDate = new Date();
    myDate.setFullYear(2010, 0, 14);

    var myDate = new Date();
    myDate.setDate(myDate.getDate() + 5); // adds 5 days

=== Truth/Falsehood in JavaScript ===

    false
    0 (zero)
    "" (empty string)
    null
    undefined
    NaN (a special Number value meaning Not-a-Number!)

    var a = !!(0);   // variable is set to false
    var b = !!("0"); // true

    var c = (false == 0);  // true
    var d = (false == ""); // true
    var e = (0 == "");     // true


    var f = (null == false);          // false
    var g = (null == null);           // true
    var h = (undefined == undefined); // true
    var i = (undefined == null);      // true

    var j = (NaN == null); // false
    var k = (NaN == NaN); // false

    If in doubt…
      Use strict equal (===) and strict not equal (!==) in situations where truthy or falsy 
      values could lead to logic errors. These operators ensure that the objects are compared 
      by type and by value.

    var l = (false == 0); // true
    var m = (false === 0); // false

=== Arrays ===

  var cars = ["Saab", "Volvo", "BMW"];
  var car = cars[0];

  To declare an "array", use:
    var points = [];
  Avoid the Array keyword.

  Arrays have length and can be sort().

  Note:
    an array returns the type of object
    to get around this, create your own isArray

      function isArray(myArray) {
        return Object.prototype.toString.call(myArray) === "[object Array]";

      }

  Example:

    var fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo").innerHTML = fruits.valueOf();

    ---> Banana,Orange,Apple,Mango

  valueOf always returns comma seperated.
  for an array, valueOf and toString are same
  to control the seperator, use .join()
    document.getElementById("demo").innerHTML = fruits.join(" * ");

  Arrays have pop() removes last element, and push() adds to end.
  .shift() removes first 0th element
  .unshift("thing") inserts "thing" at the 0th position.
  you can delete objects stored at locations. (delete fruits[0]) this leaves an undefined in place.
  you can splice in elements:
     fruits.splice(2,0,"element1","element2");
     at position 2, where
     0 elements should be removed.
  this means splice can be used to remove things:
    fruits.splice(0,1) // remove the first element (0th position, 1 removed, no parameters)

  .sort() is alphabetical, but you can provide a function
    var points = [40, 100, 1, 5, 25, 10];
    points.sort(function(a, b){return a-b}); 


  .concat() 
 
  .slice()

   <script>
     function myFunction() {
       //                0        1         2        3        4
       var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
       var citrus = fruits.slice(1,3);
       document.getElementById("demo").innerHTML = citrus;
     }
   </script>
   ---> Orange,Lemon
   ok, some notes this malformed method.
   starting on, and including the argument, grab array bits until the last argument, but not including the last one.
   (yes this is stupid)



=== Conditionals ==

  if statement:

  if (time < 10) {
    greeting = "Good morning";
  } else if (time<20) {
    greeting = "Good day";
  } else {
    greeting = "Good evening";
  } 


  switch statement

  switch (new Date().getDay()) {
    case 0:
        day = "Sunday";
        break;
    case 1:
        day = "Monday";
        break;
    case 2:
        day = "Tuesday";
        break;
    case 3:
        day = "Wednesday";
        break;
    case 4:
        day = "Thursday";
        break;
    case 5:
        day = "Friday";
        break;
    case 6:
        day = "Saturday";
        break;
  }

  switch with fall-through:

  switch (new Date().getDay()) {
    case 1:
    case 2:
    case 3:
    default:
        text = "Looking forward to the Weekend";
        break;
    case 4:
    case 5:
        text = "Soon it is Weekend";
        break;
    case 0:
    case 6:
        text = "It is Weekend";
 } 

  switch with a default:

  switch (new Date().getDay()) {
    case 6:
        text = "Today is Saturday";
        break;
    case 0:
        text = "Today is Sunday";
        break;
    default:
        text = "Looking forward to the Weekend";
 } 



=== Loops ===

  for loop:

  for (var i = 0; i < cars.length; i++) {
    text += cars[i];
  }


  var person = {fname:"John", lname:"Doe", age:25};

  var text = "";
  for (var x in person) {
    text += person[x];
  }

  while loop:

  while (i < 10) {
    text += "The number is " + i;
    i++;
  }


  do-while:

  do {
    text += "The number is " + i;
    i++;
  }
  while (i < 10);


  for loop that behaves like a while loop:

  cars = ["BMW","Volvo","Saab","Ford"];
  var i = 0;
  var text = "";

  for (;cars[i];) {
    text += cars[i] + "<br>";
    i++;
  } 

  (why would anyone do this?)

=== try/catch ===

  javascript supports try catch:

  function message() {
    try {
        adddlert("Welcome guest!");
    }
    catch(err) {
        var text = "There was an error on this page.\n\n";
        text += "Error description: " + err.message + "\n\n";
        text += "Click OK to continue.\n\n";
        alert(text);
    }
  }

  Example using throw:

  <script>
  function myFunction() {
    var mess = document.getElementById("mess");
    mess.innerHTML = "";
    try { 
        var x = document.getElementById("demo").value;
        if(x == "")  throw "Empty";
        if(isNaN(x)) throw "Not a number";
        if(x > 10)   throw "Too high";
        if(x < 5)    throw "Too low";
    }
    catch(err) {
        mess.innerHTML = "Error: " + err + ".";
    }
  }
  </script>



=== Regular Expressions ===

Used with .search() and .replace()

example:
  var str = "Visit W3Schools";
  var n = str.search(/w3schools/i); 
  
  ---> n would be 6
  (the i means case insensitive)

example:
    var str = "Visit Microsoft!";
    var res = str.replace(/microsoft/i, "W3Schools"); 
    
    ---> Visit W3Schools!

    Modifier 	Description
    i 	        Perform case-insensitive matching
    g 	        Perform a global match (find all matches rather than stopping after the first match)
    m 	        Perform multiline matching
        

    Expression 	Description
    [abc] 	    Find any of the characters between the brackets
    [0-9] 	    Find any of the digits between the brackets
    (x|y) 	    Find any of the alternatives separated with |

    Metacharacter 	Description
    \d 	            Find a digit
    \s 	            Find a whitespace character
    \b 	            Find a match at the beginning or at the end of a word
    \uxxxx 	        Find the Unicode character specified by the hexadecimal number xxxx

    Quantifier 	Description
    n+ 	        Matches any string that contains at least one n
    n* 	        Matches any string that contains zero or more occurrences of n
    n? 	        Matches any string that contains zero or one occurrences of n

  Also, there is .test()

    var patt = /e/;
    patt.test("The best things in life are free!"); 
    ---> true  (cause the is an e in the string)

and .exec(), which returns the match or a null

=== Hoisting variables ===

   you can var a previous assigned variable. this will force scope and lose value though.
   to avoid this, put your vars at the top of their scope
   also, 'using strict' at the top of the file will force variables to be var'd.
   
   example:
   
   "use strict";
      function testStrict(){
        var x;
        x = 3.14; // This does not cause an error.
      }
    x = 3.14; // This causes an error. 
    

=== JSON ===

    JavaScript Object Notation
    
    Example:
     {
      "employees":[
         {"firstName":"John", "lastName":"Doe"},
         {"firstName":"Anna", "lastName":"Smith"},
         {"firstName":"Peter", "lastName":"Jones"}
       ]
     }
     
     Broken into parts:
     
     Data
       "firstName":"John"
       
     Object
       {"firstName":"John", "lastName":"Doe"} 
       
     Array
       "employees":[
         {"firstName":"John", "lastName":"Doe"},
         {"firstName":"Anna", "lastName":"Smith"},
         {"firstName":"Peter", "lastName":"Jones"}
       ]
   
    Parsing a string:
    
         var text = '{ "employees" : [' +
               '{ "firstName":"John" , "lastName":"Doe" },' +
               '{ "firstName":"Anna" , "lastName":"Smith" },' +
               '{ "firstName":"Peter" , "lastName":"Jones" } ]}';
               
         var obj = JSON.parse(text);               

------------------------------------------------------------------------------------------------------
=== Functions ===

  - touched on this above, but basic function:
  function myFunction(a,b) {
    return a * b;
  }
  
  - also, as an expression  (anonymous functions)
  var x = function(a,b) { return a*b};
  var z = x(4,3);
  
  - there is a Function object that you can "new", but this is not recommended
  - hoisting is used to allow you to call a function before you declare it.
  - a function can self-invoking:
    (function () {
        var x = "Hello!!";      // I will invoke myself
    })();

  - functions typeof returns "function"
  - functions have an arguments.length property
  - dealing with undefined properties:
    function myFunction(x, y) {
      if (y === undefined) y = 1;
      return x * y
    } 
    OR
    function myFunction(x, y) {
      y = y || 1;
      return x * y
    } 
    
    - arguments are passed by value.
    - objects are passed by reference 
    - more on the arguments:
        x = findMax(1,123,500,115,44,88);

        function findMax() {
            max = 0;
            for(var i = 0; i < arguments.length; i++) {
                if (arguments[i] > max) max = arguments[i];
            }
            return max;
        } 
    - functions without scope belong to something; use "this" to access 
      (do not say use "window", although this will work in most cases it may not work in some)
      eg)
      function f() {} 
      this.f();
      
    - functions can belong to objects, eg:
        var myObject = {
            firstName:"John",
            lastName: "Doe",
            fullName: function() {
                return this.firstName + " " + this.lastName;
            }
        }
        myObject.fullName();         // Will return "John Doe" 
    
    - call() and apply() allow you to invoke a function explicitly
    - call() you must pass parameters
    - apply() you pass an array     
    
    eg:
        function myFunction(a, b) {    return a * b; }
        myFunction.call(myObject, 10, 2);      // Will return 20 
        myFunction.apply(myObject, [10, 2]);   // Will also return 20 

    - 
    
  
  
  =======================================================
  
  making an synchronous call:
  (note: this is bad. don't ever do this. your user experience will suffer. code another way.)
  
            $scope.upsells  = []; // services we want to sell
            var serviceURL = '//localhost/dnn/DesktopModules/QualifiedServices/API/PreQual/'
            ...
            ...
              // going to make this an synchronous call.
            var request = new XMLHttpRequest();
            request.open('GET', serviceURL + "ServiceUpSell", false);  // `false` makes the request synchronous
            request.send(null);

            if (request.status === 200) {
                var text = request.responseText;
                $scope.upsells = JSON.parse(text);

            } else {
                alert('an error has occured');
            }
  
    
  
