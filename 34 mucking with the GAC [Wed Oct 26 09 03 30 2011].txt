GAC

Open the command prompt provided by visual studio

  -- be something like: (%comspec% /k ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" x86)

From here, you can use the gacutil: (from http://www.codeproject.com/KB/dotnet/demystifygac.aspx)


This command line tool allows you to install assemblies to the GAC, remove them from the GAC and list the contents of the GAC. The online documentation for this tool is available at Global Assembly Cache Tool (Gacutil.exe).

To install an assembly called MyAssembly in the GAC, you use the command

 Collapse | Copy Code
gacutil /i MyAssembly.dll
To remove this assembly from the GAC, you use the command

 Collapse | Copy Code
gacutil /u MyAssembly
To view the contents of the GAC, you use the command

 Collapse | Copy Code
gacutil /l
Note that when uninstalling, we use just the simple textual name of the assembly since for strong-named assemblies installed in the GAC, its simple textual name matches the DLL name.

Using the /r option (gacutil /ir MyAssembly.dll and gacutil /ur MyAssembly) will ensure that references to the assembly are traced. When listing shared assemblies using gacutil /lr, the traced references are also displayed for each shared assembly. In .NET Framework 1.1, the /r must be listed separately e.g. gacutil /l /r.

You should avoid using GACUtil to install assemblies to the GAC for the following reasons:

Unless the /r option is used, there is no way to track installation references in the GAC.
GACUtil.exe is part of the .NET Framework SDK and hence is not guaranteed to be on all target machines. Additionally, it is not marked as redistributable and hence you need to check the licensing to make sure you can package it up with your application?s installation image.
Installing using GACUtil.exe does not enable Auto-Repair if the assembly in the GAC is missing (Auto-Repair is possible only with Windows Installer 2.0).
