Example of consuming Oracle via the middle layer.


1. Add the MiddleLayer DLLs (Add Reference) to your project. You may have to set your Application Pool on IIS to run 32 bit apps.

2. Add the  connection string to your web.config:
	 <connectionStrings>
	....
	    <add name="HTSSOracleServer"
        	connectionString="Server=sswebdbtest:1521/sstest2.tbaytel.com;Uid=cooper;Pwd=cooper;"
	        providerName="System.data.OracleClient" />
	 </connectionStrings>

3. Modify your dotnetnuke module to use the imported data:


In the ASCX.VB (codebehind):

.....
Imports DealerPortalMiddleLayer.TbayTel.DealerPortalMiddleLayer

.....

 Protected Sub FetchCustomerID()

        ''Dim data As Object = Inquirer.GetAllSubscriptions(51943142) '' as of 4.03, this returns Nothing.

        '' I am using a dictionary as quick way to encapsulate the data I need, in case its not returned.
        Dim data As New Dictionary(Of String, String)

        '' put the query in a string so I can debug it easier
        Dim querystr As String = "select * from subscription_point where blp_billing_point_id=" + ddlRegistedBillPoints.SelectedValue

        '' break up the returned data into set, table and row - for debugging.
        Dim ds As DataSet
        Dim dt As DataTable
        Dim dr As DataRow

        '' should wrap this call in a Try...Catch, just in case the server is down.
        Try
            '' call the middlelayer 
            ds = SqlUtil.execOracleString(querystr, True, Nothing, SqlUtil.HTSS_DATABASE)

            '' extract the data
            dt = ds.Tables(0)
            dr = dt.Rows(0)

            '' store the data into a dictionary for "transport".
            data.Add("PHONE", "(" + dr("SBR_NPA") + ") " + dr("SBR_NXX") + "-" + dr("SBR_PHONE_LINE_NO"))
            data.Add("SUBID", dr("SBR_SUBSCRIPTION_ID"))
        Catch ex As Exception
            '' in case it fails, build something. Mark the phone number so we know the data is fake.
            data.Add("PHONE", "(807)251-3177 (f)")
            data.Add("SUBID", "12402497")
        End Try

        '' assign the retrieved data to the form.
        txtPhoneNumber.Text = data("PHONE")
        txtSubscription.Text = data("SUBID")
        txtBillingPoint.Text = ddlRegistedBillPoints.SelectedValue

    End Sub
   
......


(Few comments on this: no, I am not saying we should call Oracle directly, and no I am not saying we should use queries directly. Just easy to do so for this test.)

