
Web Services....(this is plagerised from : http://msdn.microsoft.com/en-us/library/8wbhsy70.aspx)

[assuming visual 2010 for this, with IIS installed on the local machine.]
Estimated time to do this, about 30 mins.

Step 1: Create/Setup the Project:


Open Visual Web Developer.

On the File menu, click New Web Site.

The New Web Site dialog box appears.

Under Visual Studio installed templates, click ASP.NET Web Service.
[NOTE: I had to switch to a 3.5 template]

Click Browse.

Click Local IIS.

Click Default Web Site.

Click Create New Web Application.
[NOTE: this is an icon in the upper right of the Local Internet Information Server]

Visual Web Developer creates a new IIS Web application.

Type the name TemperatureWebService.

Click Open.

The New Web Site dialog box appears, with the name of the new Web site in the rightmost Location list. The location includes the protocol (http://) and location (localhost). This indicates that you are working with a local IIS Web site.
[NOTE: lcoated at the bottom of the widget]

In the Language list, click the programming language that you prefer to work in.
[NOTE:  I would "prefer" to work in C#, but we don't do that here.]

The programming language that you choose will be the default for the Web site. However, you can use more than one language in the same Web application by creating pages and components in different programming languages. For more information about how to create components using different languages, see Shared Code Folders in ASP.NET Web Projects.

Click OK.

Visual Web Developer creates the new Web service and opens a new class named Service, which is the default Web service. However, in the following procedure you will create a new Web service with a specified name and you will not use the Service class.

Close the Service class.

-----------------------------------------------------------------
Step 2: To create the Web service

In Solution Explorer, right-click the Web site name (http://localhost/TemperatureWebService), and then click Add New Item.

Under Visual Studio installed templates, click Web Service, and then in the Name box, type Convert.

Make sure that the Place code in separate file check box is selected, and then click Add.

Visual Web Developer creates a new Web service that is made up of two files. The Convert.asmx file is the file that can be invoked to call Web service methods, and it points to the code for the Web service. The code itself is in a class file (Convert.vb, Convert.cs, or Convert.jsl, depending on the programming language) in the App_Code folder. The code file contains a template for a Web service. The code file includes some code for a Web service method.

You will create two methods in the Web service. The first method converts Fahrenheit temperatures to Celsius, and the second method converts Celsius temperatures to Fahrenheit.

-----------------------------------------------------------------
Step 3: Actual Code

Add the following Web Service methods:

    <System.Web.Services.WebMethod()> _
Public Function FahrenheitToCelsius(ByVal Fahrenheit As Double) _
        As Double
        Return ((Fahrenheit - 32) * 5) / 9
    End Function

    <System.Web.Services.WebMethod()> _
        Public Function CelsiusToFahrenheit(ByVal Celsius As Double) _
            As Double
        Return ((Celsius * 9) / 5) + 32
    End Function



----------------------------------------------------------------
Step 4 : Test

To test the Web service

In Solution Explorer, click Convert.asmx, and then press CTRL+F5.

The Web service is invoked and a page appears in the browser that shows the methods that are exposed by the Web service.

Click CelsiusToFahrenheit, which invokes that method.

A page appears that prompts you for parameter values for the CelsiusToFahrenheit method.

In the Celsius box, type 100, and then click Invoke.

A new window appears that displays the XML that the Web service returns when the CelsiusToFahrenheit method is invoked. The value 212 appears in the XML.

Close the browser that contains the method results.

In the original browser, click Back to return to the list of methods.

Click FahrenheitToCelsius and test to make sure that the method is returning the results that you expect.

If you type 212, the FahrenheitToCelsius method will return 100.

Close the browser.

--------------------------------------------------------------

Step 5: Deployment/Setting up a web Page to use this.

NOTE:  should talk about why we need this. Frankly, this is pretty standard.

To create a Web site to use the Web service

On the File menu, click New Web Site.

Under Visual Studio installed templates, click ASP.NET Web Site.

Click Browse.

Click Local IIS.

Click Default Web Site.

Click Create New Web Application.

Visual Web Developer creates a new IIS Web application.

Type the name TemperatureWeb.

Click Open.

In the Language list, click the programming language that you prefer to work in.

Click OK.

Visual Web Developer creates a new local IIS Web site and a new page named Default.aspx.

----------------------------------------------------------------

Step 6: add a visual element

On the Web Site menu, click Add Web Reference.

The Add Web Reference dialog box appears, as shown in the following screen shot.

Add Web Reference dialog box

[OK: this is not the same anymore - Microsoft has changed things:
 - select "Website", "Add Service Reference".
 - click the [Advanced...] button, lower left corner
 - click [Add Web Reference..] button, lower left corner
]

[NOTE:  The dialog on the web page is different, the menus are different. I used "Add Service Reference" ]

In the URL list, enter the following URL for the Web service, and then click Go:

http://localhost/TemperatureWebService/Convert.asmx

When Visual Web Developer finds the Web service, information about the Web service appears in the Add Web References dialog box.

Click one of the method links.

The test page for the method appears.

Click Add Reference.

Visual Web Developer creates an App_WebReferences folder and adds a folder to it for the new Web reference. By default, Web references are assigned a namespace corresponding to their server name (in this case, localhost). Make a note of the name for the Web reference namespace. In the folder, Visual Web Developer adds a .wsdl file that references the Web service. It also adds supporting files, such as discovery (.disco and .discomap) files, that include information about where the Web service is located.

Next step is to build a little GUI. This is to taste, but name some elements:

  Textbox ID: TemperatureTextbox Text: (empty)
  Button  ID: ConvertButton      Text: Convert
  Label   ID: FahrenheitLabel    Text: (empty)
  Label   ID: CelsiusLabel       Text: (empty)

I put it in a table:
   <table>
        <tr><td><asp:TextBox ID="TemperatureTextbox" runat="server"></asp:TextBox></td></tr>
        <tr><td><asp:Button ID="ConvertButton" runat="server" Text="Button" /></td></tr>
        <tr><td><asp:Label ID="FahrenheitLabel" runat="server" Text="Label"></asp:Label></td></tr>
        <tr><td><asp:Label ID="CelsiusLabel" runat="server" Text="Label"></asp:Label></td></tr>
    </table>

Double-click ConvertButton to create an event handler for its Click event, add code to handle:


    Protected Sub ConvertButton_Click(sender As Object, e As System.EventArgs) Handles ConvertButton.Click
        Dim wsConvert As New localhost.Convert()
        Dim temperature As Double
        temperature = System.Convert.ToDouble(TemperatureTextbox.Text)
        FahrenheitLabel.Text = "Fahrenheit To Celsius = " & _
            wsConvert.FahrenheitToCelsius(temperature).ToString()
        CelsiusLabel.Text = "Celsius To Fahrenheit = " & _
            wsConvert.CelsiusToFahrenheit(temperature).ToString()
    End Sub

Press CTRL+F5 to run the page.

In the text box, type a value, such as 100, and then click Convert.

The page displays the result of converting the temperature value into both Fahrenheit and Celsius.

---------------------------------------------------------------------------------------


Further reading: http://weblogs.asp.net/scottgu/archive/2010/07/29/vs-2010-web-deployment.aspx






